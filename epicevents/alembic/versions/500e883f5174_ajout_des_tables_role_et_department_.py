"""Ajout des tables Role et Department, modification du modèle User

Revision ID: 500e883f5174
Revises: fc50c90b6d97
Create Date: 2024-11-11 01:13:50.030612

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '500e883f5174'
down_revision: Union[str, None] = 'fc50c90b6d97'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('departments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_departments_id'), 'departments', ['id'], unique=False)
    op.create_index(op.f('ix_departments_name'), 'departments', ['name'], unique=True)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)

    # Insérer les rôles dans la table 'roles'
    roles_table = sa.table('roles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False)
    )

    op.bulk_insert(roles_table,
        [
            {'id': 1, 'name': 'admin', 'description': 'Administrateur avec tous les droits'},
            {'id': 2, 'name': 'manager', 'description': 'Manager avec droits intermédiaires'},
            {'id': 3, 'name': 'user', 'description': 'Utilisateur avec droits limités'},
        ]
    )

    # Ajouter les colonnes 'department_id' et 'role_id' comme nullable
    op.add_column('users', sa.Column('department_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('role_id', sa.Integer(), nullable=True))

    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=False)

    # Créer les clés étrangères
    op.create_foreign_key('fk_users_department_id', 'users', 'departments', ['department_id'], ['id'])
    op.create_foreign_key('fk_users_role_id', 'users', 'roles', ['role_id'], ['id'])

    # Supprimer les anciennes colonnes 'department' et 'role'
    op.drop_column('users', 'department')
    op.drop_column('users', 'role')

    # Attribuer le rôle 'user' (id=3) aux utilisateurs existants
    op.execute('UPDATE users SET role_id=3 WHERE role_id IS NULL')

    # Rendre la colonne 'role_id' non nulle
    op.alter_column('users', 'role_id', existing_type=sa.Integer(), nullable=False)

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('department', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint('fk_users_role_id', 'users', type_='foreignkey')
    op.drop_constraint('fk_users_department_id', 'users', type_='foreignkey')
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'role_id')
    op.drop_column('users', 'department_id')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_departments_name'), table_name='departments')
    op.drop_index(op.f('ix_departments_id'), table_name='departments')
    op.drop_table('departments')
    # ### end Alembic commands ###
